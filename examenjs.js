/**
 * 1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve?
R/ Para guardar informacion en memoria para usarla despues en el codigo.

¬øCu√°l es la diferencia entre declarar e inicializar una variable?
R/Declarar es mencionarla pero aun no se le ha asignado alg√∫n valor, en cambio para inicializarla
necesariamente se le necesita asignar un valor.

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
R/ Para la suma de n√∫meros se usa la aritmetica basica, cuando se suma string se concatenan los caracteres de manera lineal.

¬øCu√°l operador me permite sumar o concatenar?
R/ "+"

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre ---> nombre (string)
Apellido----> apellido(String)
Nombre de usuario en Platzi----->platziUser(String)
Edad----> edad(Number)
Correo electr√≥nico----> email(String)
Mayor de edad ------> esMayorEdad(Bool)
Dinero ahorrado-----> dineroAhorrado(Number)
Deudas-------> deudas(Number)

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
*/
var nombre = "Juan Esteban";
var apellido = "Vald√©s Ospina";
var platziUser = "JevDev2304";
var edad = 19;
var email = "juanes@platzi.com";
var esMayorEdad = false;
var dineroAhorrado= 879;
var deudas = 15;
//4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
var nombreCompleto = nombre + " " + apellido;
var dineroTotal = dineroAhorrado-deudas;
console.log(`El Nombre completo es ${nombreCompleto} y el dinero total es ${dineroTotal}`);

/**
 * 1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n?
R/ Es un bloque de codigo que se define(encapsulaci√≥n), el cual cumple una utilidad y se puede llamar a trav√©s de la codificaci√≥n. Debe tener valores de entrada ya que si no tiene seria un procedimiento.
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
R/Cuando el codigo se va utilizar muchas veces, para modalizar y cuando se desea tener un codigo m√°s legible y organizado.
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
R/Los paramatros son la palabra o las palabras que  usamos entre los parentesis de la funci√≥n cuando la definimos. Los argumentos son los valores que le ingresamos a esta funci√≥n entre los parentesis.

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
 */
const name = "Juan David ";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
function presentacion(nombre,apellido,nombreUsuario){
    console.log("Mi nombre es " + nombre + apellido + ", pero prefiero que me digas " + nombreUsuario + ".")    
}
presentacion(name,lastname,nickname);

/**
 * 1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?
R/ Es una forma de controlar lo que hace el codigo dependiendo de que  se cumpla o no se cumpla un criterio.
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
R/ if , else if , else y switch, en el caso que se usa if, si se cumple la condicion se ejecuta el codigo que se encuentra dentro del if , en caso  de que haya otras posibles
soluciones con condicion se usa else if, en caso que ninguna se cumpla se ejecuta el codigo que se encuentra dentro del else. En el caso de switch, se ingresa una variable, se definen multiples casos que en caso que
se cumpla una se ejecuta el  codigo dentro de ese caso  y  se rompe con un break. Se recomienda usar switch cuando pueden existir muchos condicionales para que el codigo sea m√°s legible.
¬øPuedo combinar funciones y condicionales?
R/ Si y es demasiado util, ya que asi le podemos sacar mas provecho a la funci√≥n. Pudiendo retornar unos valores diferentes a trav√©s de los condicionales para ahorrar codigo y cumplir la utilidad de manera correcta.

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
 */
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}
if (tipoDeSuscripcion === "Free"){console.log("Solo puedes tomar los cursos gratis");}
else if (tipoDeSuscripcion === "Basic"){console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");}
else if (tipoDeSuscripcion === "Expert"){console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");}
else if (tipoDeSuscripcion === "ExpertPlus"){ console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");}

//3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
//üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè
var free = {nombre: "Free", info:"Solo puedes tomar los cursos gratis"}
var basic = {nombre: "Basic", info:"Puedes tomar casi todos los cursos de Platzi durante un mes"}
var expert = {nombre: "Expert", info: "Puedes tomar casi todos los cursos de Platzi durante un a√±o"}
var expertPlus = {nombre: "ExpertPlus", info:"T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"}
var listaTipoSub = [free,basic,expert,expertPlus];
var usertipo = "Expert";
for (var tipo of listaTipoSub){
 if (tipo.nombre == usertipo){
    console.log(`El plan que tienes es ${tipo.nombre} y ${tipo.info}`);
 }
}
/**1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?
R/ Es una sentencia que se ejecuta repetitivamente hasta que se deje de cumplir una condici√≥n.
¬øQu√© tipos de ciclos existen en JavaScript?
R/While y for, el while es un ciclo que se ejecuta hasta que se deja de cumplir una condici√≥n y el for se da un rango o un iterable, y se hace el numero de veces que el programador lo necesite.
¬øQu√© es un ciclo infinito y por qu√© es un problema?
R/ Da problemas ya que la potencia de computo es limitada, y pues se consume toda, ademas la mayoria  de ciclos infinitos no son utiles ya que los programas casi siempre son finitos.
¬øPuedo mezclar ciclos y condicionales?
R/Si y es muy util para diferenciar que se debe hacer en cada de iteraci√≥n del ciclo, esto le abre un mundo de posibilidades al programador para hacer un monton de cosas con el codigo.
2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
*/
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}
var contadorPrimerCiclo = 0;
while (contadorPrimerCiclo != 5){
    console.log("El valor de i es: " + contadorPrimerCiclo);
    contadorPrimerCiclo += 1;
}
var contadorSegundoCiclo = 10;
while (contadorSegundoCiclo != 1){
    console.log("El valor de i es: " + contadorSegundoCiclo);
    contadorSegundoCiclo -= 1;
}
/**
  3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
    üí° Pista: puedes usar la funci√≥n prompt de JavaScript.
 */
var respuestaUsuario;
while (respuestaUsuario != 4){
    respuestaUsuario= parseInt(prompt("Cuanto es 2 + 2 = ?"));
}
console.log("Lo Lograste :D, Que grande XD");
/**
 1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array?
R/Es un dato de tipo objeto que puede contener desde 0 o mas datos, se organizan de manera secuencial.
¬øQu√© es un objeto?s
R/Es un tipo de dato que  contiene propiedades y metodos las cuales la definen.
¬øCu√°ndo es mejor usar objetos o arrays?
R/ En caso que sea necesario mejor modificar todos los elementos es mejor el array y si los queremos organizar de manera secuencial, en cambio si queremos darle propiedades a un elemento es mejor 
usar un dato tipo objeto ;D.
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
R/ Si ,ademas es muy  util cuando se necesita organizar muchos datos.
2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
 */
function primerElementoArray(array){
    console.log(array[0]);
}
var fruteria = ["Pera","Manzana", "Banano"];
primerElementoArray(fruteria);
//3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
function imprimirElementoArray(array){
    for (elemento of array){console.log(elemento);}
    
}
var autos= ["Mercedez","Toyota","Tesla","Subaru"];
imprimirElementoArray(autos);
//4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
function imprimirObjeto(objeto){
    for (nombreatributo of Object.keys(objeto)){
        console.log(`El nombre de la propiedad es ${nombreatributo} y el valor  es ${objeto[String(nombreatributo)]} `);
    }
}
auto = {
    marca: "Subaru",
    modelo: "Forester",
    annio: 2015,
    propietario: "Liliana"
}
imprimirObjeto(auto);








